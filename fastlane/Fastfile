require 'jira-ruby'

options = {
  :username           => ENV['JIRA_USERNAME'],
  :password           => ENV['JIRA_PASSWORD'],
  :site               => 'http://localhost:2990',
  :context_path       => '/jira',
  :auth_type          => :cookie,  # Set cookie based authentication
  :use_cookies        => true,     # Send cookies with each request
  :use_ssl            => false,
}

client = JIRA::Client.new(options)

lane :connect_feedback do
  fastlane_require 'spaceship'

  existing_feedback_ids = get_existing_feedback_ids_from_jira
  Spaceship::Tunes.login
  team_id = Spaceship::Tunes.select_team

  # Gets app
  app = Spaceship::ConnectAPI::App.find(ENV["BUNDLE_IDENTIFIER"])

  # Gets feedback for an app (default includes screenshots and tester info)
  feedbacks = app.get_beta_feedback

  # Iterate over feedbacks
  feedbacks.each do |feedback|
    if existing_feedback_ids.include?(feedback.id)
      puts "Feedback with ID #{feedback.id} is already tracked. Skipping..."
      next
    end

    download_url = "https://appstoreconnect.apple.com/testflight/v3/providers/#{team_id}/apps/#{app.id}/feedback/download/#{feedback.id}.zip"

    details_table_data = Array.new

    if feedback.tester
      details_table_data.push("||Name|#{feedback.tester.first_name} #{feedback.tester.last_name}|")
      details_table_data.push("||Email|#{feedback.tester.email}|")
    end

    if feedback.build
      details_table_data.push("||Build version|#{feedback.build.version}|")
    end

    # Use localized date
    time = Time.parse feedback.timestamp
    details_table_data.push("||Timestamp|#{time.localtime.rfc822}|")

    details_table_data.push("||Device model|#{feedback.device_model}|")
    details_table_data.push("||OS Version|#{feedback.os_version}|")
    details_table_data.push("||Connection status|#{feedback.connection_status}|")

    screenshots = Array.new
    feedback.screenshots.each do |screenshot|
      assets = Array.new
      screenshot.image_assets.each do |image_asset|
        screenshots.push("- [#{image_asset["width"]}x#{image_asset["height"]}|#{image_asset["url"]}]")
      end

      screenshots.push("#{assets.join("\n")}")
    end

    screenshot_section = ''
    if !screenshots.empty?
      screenshot_section = """
      h2. Screenshots

      #{screenshots.join("\n")}
      """
    end

    issue = client.Issue.build
    issue.save({
      "fields" => {
        "summary"   => feedback.comment,
        "project"   => {"key" => ENV["JIRA_PROJECT_KEY"]},
        "issuetype" => {"id" => ENV["JIRA_ISSUE_TYPE_ID"]},
        "customfield_#{ENV['JIRA_FEEDBACK_ID_FIELD']}" => feedback.id,
        "description" => """
        {quote}
        #{feedback.comment}
        {quote}

        h1. Details from TestFlight

        #{details_table_data.join("\n")}

        [Download feedback|#{download_url}] {color:#c1c7d0}_(Requires App Store Connect authentication)_{color}

        #{screenshot_section}
        """
      }
    })
  end
end

private_lane :get_existing_feedback_ids_from_jira do |_|
  project = client.Project.find(ENV["JIRA_PROJECT_KEY"])

  feedback_id_field = ENV['JIRA_FEEDBACK_ID_FIELD']
  jql = "cf[#{feedback_id_field}] IS NOT EMPTY"

  feedback_ids = Set.new
  client.Issue.jql(jql).each do |issue|
    feedback_ids.add(issue.fields["customfield_#{feedback_id_field}"])
  end

  feedback_ids
end
