require 'jira-ruby'

options = {
  :username           => ENV['JIRA_USERNAME'],
  :password           => ENV['JIRA_PASSWORD'],
  :site               => 'http://localhost:2990',
  :context_path       => '/jira',
  :auth_type          => :cookie,  # Set cookie based authentication
  :use_cookies        => true,     # Send cookies with each request
  :use_ssl            => false,
}

client = JIRA::Client.new(options)

lane :connect_feedback do
  fastlane_require 'spaceship'

  Spaceship::Tunes.login
  team_id = Spaceship::Tunes.select_team

  # Gets app
  app = Spaceship::ConnectAPI::App.find(ENV["BUNDLE_IDENTIFIER"])

  # Gets feedback for an app (default includes screenshots and tester info)
  feedbacks = app.get_beta_feedback

  # Iterate over feedbacks
  feedbacks.each do |feedback|
    puts ""
    puts "ID: #{feedback.id}"
    puts "comment: #{feedback.comment}"
    if feedback.tester
      puts "name: #{feedback.tester.first_name} #{feedback.tester.last_name}"
      puts "email: #{feedback.tester.email}"
    end

    if feedback.build
      puts "build: #{feedback.build.version}"
    end

    download_link = feedback_download_link(
      app_id: app.id,
      team_id: team_id,
      feedback_id: feedback.id
    )
    puts "Download: #{download_link}"

    # Iterate over feedback screenshots
    feedback.screenshots.each do |screenshot|

      # screenshot.image_assets is an array of different resolults of a screenshots
      screenshot.image_assets.each do |image_asset|

        puts "\turl: #{image_asset["url"]}"
        puts "\twidth: #{image_asset["width"]}"
        puts "\theight: #{image_asset["height"]}"
      end
    end
  end
end

private_lane :feedback_download_link do |options|
  "https://appstoreconnect.apple.com/testflight/v3/providers/#{options[:team_id]}/apps/#{options[:app_id]}/feedback/download/#{options[:feedback_id]}.zip"
end

private_lane :get_existing_feedback_ids_from_jira do |_|
  project = client.Project.find(ENV["JIRA_PROJECT_KEY"])

  feedback_id_field = ENV['JIRA_FEEDBACK_ID_FIELD']
  jql = "cf[#{feedback_id_field}] IS NOT EMPTY"

  feedback_ids = Set.new
  client.Issue.jql(jql).each do |issue|
    feedback_ids.add(issue.fields["customfield_#{feedback_id_field}"])
  end

  feedback_ids
end
